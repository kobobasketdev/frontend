/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WishlistImport } from './routes/wishlist'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as CheckoutImport } from './routes/checkout'
import { Route as CartImport } from './routes/cart'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsDetailsImport } from './routes/products.$details'
import { Route as CategoryCategoryImport } from './routes/category.$category'
import { Route as ProductsReviewDetailsImport } from './routes/products_.review.$details'

// Create/Update Routes

const WishlistRoute = WishlistImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutRoute = CheckoutImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRoute,
} as any)

const CartRoute = CartImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsDetailsRoute = ProductsDetailsImport.update({
  id: '/products/$details',
  path: '/products/$details',
  getParentRoute: () => rootRoute,
} as any)

const CategoryCategoryRoute = CategoryCategoryImport.update({
  id: '/category/$category',
  path: '/category/$category',
  getParentRoute: () => rootRoute,
} as any)

const ProductsReviewDetailsRoute = ProductsReviewDetailsImport.update({
  id: '/products_/review/$details',
  path: '/products/review/$details',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartImport
      parentRoute: typeof rootRoute
    }
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/wishlist': {
      id: '/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof WishlistImport
      parentRoute: typeof rootRoute
    }
    '/category/$category': {
      id: '/category/$category'
      path: '/category/$category'
      fullPath: '/category/$category'
      preLoaderRoute: typeof CategoryCategoryImport
      parentRoute: typeof rootRoute
    }
    '/products/$details': {
      id: '/products/$details'
      path: '/products/$details'
      fullPath: '/products/$details'
      preLoaderRoute: typeof ProductsDetailsImport
      parentRoute: typeof rootRoute
    }
    '/products_/review/$details': {
      id: '/products_/review/$details'
      path: '/products/review/$details'
      fullPath: '/products/review/$details'
      preLoaderRoute: typeof ProductsReviewDetailsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/wishlist': typeof WishlistRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/products/$details': typeof ProductsDetailsRoute
  '/products/review/$details': typeof ProductsReviewDetailsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/wishlist': typeof WishlistRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/products/$details': typeof ProductsDetailsRoute
  '/products/review/$details': typeof ProductsReviewDetailsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/wishlist': typeof WishlistRoute
  '/category/$category': typeof CategoryCategoryRoute
  '/products/$details': typeof ProductsDetailsRoute
  '/products_/review/$details': typeof ProductsReviewDetailsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/checkout'
    | '/login'
    | '/signup'
    | '/wishlist'
    | '/category/$category'
    | '/products/$details'
    | '/products/review/$details'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/checkout'
    | '/login'
    | '/signup'
    | '/wishlist'
    | '/category/$category'
    | '/products/$details'
    | '/products/review/$details'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/checkout'
    | '/login'
    | '/signup'
    | '/wishlist'
    | '/category/$category'
    | '/products/$details'
    | '/products_/review/$details'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  CheckoutRoute: typeof CheckoutRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  WishlistRoute: typeof WishlistRoute
  CategoryCategoryRoute: typeof CategoryCategoryRoute
  ProductsDetailsRoute: typeof ProductsDetailsRoute
  ProductsReviewDetailsRoute: typeof ProductsReviewDetailsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  CheckoutRoute: CheckoutRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  WishlistRoute: WishlistRoute,
  CategoryCategoryRoute: CategoryCategoryRoute,
  ProductsDetailsRoute: ProductsDetailsRoute,
  ProductsReviewDetailsRoute: ProductsReviewDetailsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cart",
        "/checkout",
        "/login",
        "/signup",
        "/wishlist",
        "/category/$category",
        "/products/$details",
        "/products_/review/$details"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cart": {
      "filePath": "cart.ts"
    },
    "/checkout": {
      "filePath": "checkout.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/wishlist": {
      "filePath": "wishlist.ts"
    },
    "/category/$category": {
      "filePath": "category.$category.ts"
    },
    "/products/$details": {
      "filePath": "products.$details.tsx"
    },
    "/products_/review/$details": {
      "filePath": "products_.review.$details.ts"
    }
  }
}
ROUTE_MANIFEST_END */
